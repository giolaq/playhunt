part of playhunt.common;

/// Error Generated by [PlayHunt]
class PlayHuntError implements Exception {
  final String message;
  final String apiUrl;
  final PlayHunt playhunt;
  final Object source;

  PlayHuntError(this.playhunt, this.message, {this.apiUrl, this.source});

  @override
  String toString() => "PlayHunt Error: ${message}";
}

/// PlayHunt Entity was not found
class NotFound extends PlayHuntError {
  NotFound(PlayHunt playhunt, String msg) : super(playhunt, msg);
}

class BadRequest extends PlayHuntError {
  BadRequest(PlayHunt playhunt, [String msg = 'Not Found']) : super(playhunt, msg);
}

/// PlayHunt Repository was not found
class RepositoryNotFound extends NotFound {
  RepositoryNotFound(PlayHunt playhunt, String repo)
      : super(playhunt, "Repository Not Found: ${repo}");
}

/// PlayHunt User was not found
class UserNotFound extends NotFound {
  UserNotFound(PlayHunt playhunt, String user)
      : super(playhunt, "User Not Found: ${user}");
}

/// PlayHunt Organization was not found
class OrganizationNotFound extends NotFound {
  OrganizationNotFound(PlayHunt playhunt, String organization)
      : super(playhunt, "Organization Not Found: ${organization}");
}

/// PlayHunt Team was not found
class TeamNotFound extends NotFound {
  TeamNotFound(PlayHunt playhunt, int id) : super(playhunt, "Team Not Found: ${id}");
}

/// Access was forbidden to a resource
class AccessForbidden extends PlayHuntError {
  AccessForbidden(PlayHunt playhunt) : super(playhunt, "Access Forbbidden");
}

/// Client hit the rate limit.
class RateLimitHit extends PlayHuntError {
  RateLimitHit(PlayHunt playhunt) : super(playhunt, "Rate Limit Hit");
}

/// An Unknown Error
class UnknownError extends PlayHuntError {
  UnknownError(PlayHunt playhunt) : super(playhunt, "Unknown Error");
}

/// PlayHunt Client was not authenticated
class NotAuthenticated extends PlayHuntError {
  NotAuthenticated(PlayHunt playhunt) : super(playhunt, "Client not Authenticated");
}

class InvalidJSON extends BadRequest {
  InvalidJSON(PlayHunt playhunt, [String message = "Invalid JSON"])
      : super(playhunt, message);
}

class ValidationFailed extends PlayHuntError {
  ValidationFailed(PlayHunt playhunt, [String message = "Validation Failed"])
      : super(playhunt, message);
}
